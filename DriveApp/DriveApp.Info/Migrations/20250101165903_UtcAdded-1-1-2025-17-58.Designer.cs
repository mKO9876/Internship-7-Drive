// <auto-generated />
using System;
using DriveApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DriveApp.Info.Migrations
{
    [DbContext(typeof(DriveAppContext))]
    [Migration("20250101165903_UtcAdded-1-1-2025-17-58")]
    partial class UtcAdded1120251758
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DriveApp.Data.Entities.Models.Comments", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentId"));

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FileId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            CommentText = "Great job on this document!",
                            CommentingDate = new DateTime(2023, 1, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            FileId = 1,
                            UserId = 1
                        },
                        new
                        {
                            CommentId = 2,
                            CommentText = "Can we improve the formatting?",
                            CommentingDate = new DateTime(2023, 2, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            FileId = 2,
                            UserId = 2
                        },
                        new
                        {
                            CommentId = 3,
                            CommentText = "This section is unclear, please revise.",
                            CommentingDate = new DateTime(2023, 3, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            FileId = 3,
                            UserId = 1
                        },
                        new
                        {
                            CommentId = 4,
                            CommentText = "Awesome photo, very well taken!",
                            CommentingDate = new DateTime(2023, 4, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            FileId = 4,
                            UserId = 3
                        },
                        new
                        {
                            CommentId = 5,
                            CommentText = "Add more details about the project timeline.",
                            CommentingDate = new DateTime(2023, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            FileId = 5,
                            UserId = 2
                        },
                        new
                        {
                            CommentId = 6,
                            CommentText = "The video quality is amazing!",
                            CommentingDate = new DateTime(2023, 6, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            FileId = 6,
                            UserId = 4
                        },
                        new
                        {
                            CommentId = 7,
                            CommentText = "Consider compressing this file further.",
                            CommentingDate = new DateTime(2023, 7, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            FileId = 7,
                            UserId = 3
                        },
                        new
                        {
                            CommentId = 8,
                            CommentText = "This archive is missing some files.",
                            CommentingDate = new DateTime(2023, 8, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            FileId = 8,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("DriveApp.Data.Entities.Models.Directories", b =>
                {
                    b.Property<int>("DirectoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DirectoryId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DirectoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("DirectoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Diretories");

                    b.HasData(
                        new
                        {
                            DirectoryId = 1,
                            CreatedDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DirectoryName = "Documents",
                            UserId = 1
                        },
                        new
                        {
                            DirectoryId = 2,
                            CreatedDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DirectoryName = "Photos",
                            UserId = 1
                        },
                        new
                        {
                            DirectoryId = 3,
                            CreatedDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DirectoryName = "Music",
                            UserId = 2
                        },
                        new
                        {
                            DirectoryId = 4,
                            CreatedDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DirectoryName = "Videos",
                            UserId = 2
                        },
                        new
                        {
                            DirectoryId = 5,
                            CreatedDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DirectoryName = "Projects",
                            UserId = 3
                        },
                        new
                        {
                            DirectoryId = 6,
                            CreatedDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DirectoryName = "Downloads",
                            UserId = 3
                        },
                        new
                        {
                            DirectoryId = 7,
                            CreatedDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DirectoryName = "Backups",
                            UserId = 4
                        },
                        new
                        {
                            DirectoryId = 8,
                            CreatedDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DirectoryName = "Archives",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("DriveApp.Data.Entities.Models.DirectoriesFiles", b =>
                {
                    b.Property<int>("DirectoryId")
                        .HasColumnType("integer");

                    b.Property<int>("FileId")
                        .HasColumnType("integer");

                    b.HasKey("DirectoryId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("DirectoriesFiles");

                    b.HasData(
                        new
                        {
                            DirectoryId = 1,
                            FileId = 1
                        },
                        new
                        {
                            DirectoryId = 1,
                            FileId = 2
                        },
                        new
                        {
                            DirectoryId = 2,
                            FileId = 3
                        },
                        new
                        {
                            DirectoryId = 2,
                            FileId = 4
                        },
                        new
                        {
                            DirectoryId = 3,
                            FileId = 5
                        },
                        new
                        {
                            DirectoryId = 3,
                            FileId = 6
                        },
                        new
                        {
                            DirectoryId = 4,
                            FileId = 7
                        },
                        new
                        {
                            DirectoryId = 4,
                            FileId = 8
                        });
                });

            modelBuilder.Entity("DriveApp.Data.Entities.Models.Files", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FileId"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastChanged")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FileId");

                    b.ToTable("Files");

                    b.HasData(
                        new
                        {
                            FileId = 1,
                            FileName = "Resume.pdf",
                            LastChanged = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            FileId = 2,
                            FileName = "VacationPhoto.jpg",
                            LastChanged = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            FileId = 3,
                            FileName = "ProjectPlan.docx",
                            LastChanged = new DateTime(2023, 3, 5, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            FileId = 4,
                            FileName = "MusicTrack.mp3",
                            LastChanged = new DateTime(2023, 4, 20, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            FileId = 5,
                            FileName = "VideoClip.mp4",
                            LastChanged = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            FileId = 6,
                            FileName = "Presentation.pptx",
                            LastChanged = new DateTime(2023, 6, 30, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            FileId = 7,
                            FileName = "Backup.zip",
                            LastChanged = new DateTime(2023, 7, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            FileId = 8,
                            FileName = "Archive.tar.gz",
                            LastChanged = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("DriveApp.Data.Entities.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "cmurrells13@xrea.com",
                            Password = "qF3czvmaacr"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "aklousner0@disqus.com",
                            Password = "lX5JIBd2X9"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "jdunton1@independent.co.uk",
                            Password = "yJ7pdXOtk"
                        },
                        new
                        {
                            UserId = 4,
                            Email = "voborne2@artisteer.com",
                            Password = "eO4oorIPc"
                        },
                        new
                        {
                            UserId = 5,
                            Email = "hbrownhall3@intel.com",
                            Password = "0wX7dieS"
                        },
                        new
                        {
                            UserId = 6,
                            Email = "gbarnewall4@comsenz.com",
                            Password = "cE5MEA4r1NE=C"
                        },
                        new
                        {
                            UserId = 7,
                            Email = "dbantham5@businessinsider.com",
                            Password = "XDFCGVHBUNIJKOLP"
                        },
                        new
                        {
                            UserId = 8,
                            Email = "cchuter6@blogspot.com",
                            Password = "cvhbnjkml"
                        });
                });

            modelBuilder.Entity("DriveApp.Data.Entities.Models.UsersFiles", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("FileId")
                        .HasColumnType("integer");

                    b.Property<int>("Owner")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("UsersFiles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            FileId = 1,
                            Owner = 1
                        },
                        new
                        {
                            UserId = 1,
                            FileId = 2,
                            Owner = 1
                        },
                        new
                        {
                            UserId = 2,
                            FileId = 3,
                            Owner = 1
                        },
                        new
                        {
                            UserId = 2,
                            FileId = 4,
                            Owner = 2
                        },
                        new
                        {
                            UserId = 3,
                            FileId = 5,
                            Owner = 3
                        },
                        new
                        {
                            UserId = 3,
                            FileId = 6,
                            Owner = 2
                        },
                        new
                        {
                            UserId = 4,
                            FileId = 7,
                            Owner = 4
                        },
                        new
                        {
                            UserId = 4,
                            FileId = 8,
                            Owner = 4
                        });
                });

            modelBuilder.Entity("DriveApp.Data.Entities.Models.Comments", b =>
                {
                    b.HasOne("DriveApp.Data.Entities.Models.Users", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DriveApp.Data.Entities.Models.Directories", b =>
                {
                    b.HasOne("DriveApp.Data.Entities.Models.Users", "User")
                        .WithMany("Directories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DriveApp.Data.Entities.Models.DirectoriesFiles", b =>
                {
                    b.HasOne("DriveApp.Data.Entities.Models.Directories", "Directory")
                        .WithMany("DirectoriesFiles")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriveApp.Data.Entities.Models.Files", "File")
                        .WithMany("DirectoriesFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Directory");

                    b.Navigation("File");
                });

            modelBuilder.Entity("DriveApp.Data.Entities.Models.UsersFiles", b =>
                {
                    b.HasOne("DriveApp.Data.Entities.Models.Files", "File")
                        .WithMany("UsersFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriveApp.Data.Entities.Models.Users", "User")
                        .WithMany("UsersFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DriveApp.Data.Entities.Models.Directories", b =>
                {
                    b.Navigation("DirectoriesFiles");
                });

            modelBuilder.Entity("DriveApp.Data.Entities.Models.Files", b =>
                {
                    b.Navigation("DirectoriesFiles");

                    b.Navigation("UsersFiles");
                });

            modelBuilder.Entity("DriveApp.Data.Entities.Models.Users", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Directories");

                    b.Navigation("UsersFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
